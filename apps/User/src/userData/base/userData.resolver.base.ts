/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserData } from "./UserData";
import { UserDataCountArgs } from "./UserDataCountArgs";
import { UserDataFindManyArgs } from "./UserDataFindManyArgs";
import { UserDataFindUniqueArgs } from "./UserDataFindUniqueArgs";
import { CreateUserDataArgs } from "./CreateUserDataArgs";
import { UpdateUserDataArgs } from "./UpdateUserDataArgs";
import { DeleteUserDataArgs } from "./DeleteUserDataArgs";
import { UserDataService } from "../userData.service";
@graphql.Resolver(() => UserData)
export class UserDataResolverBase {
  constructor(protected readonly service: UserDataService) {}

  async _userDataItemsMeta(
    @graphql.Args() args: UserDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserData])
  async userDataItems(
    @graphql.Args() args: UserDataFindManyArgs
  ): Promise<UserData[]> {
    return this.service.userDataItems(args);
  }

  @graphql.Query(() => UserData, { nullable: true })
  async userData(
    @graphql.Args() args: UserDataFindUniqueArgs
  ): Promise<UserData | null> {
    const result = await this.service.userData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserData)
  async createUserData(
    @graphql.Args() args: CreateUserDataArgs
  ): Promise<UserData> {
    return await this.service.createUserData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserData)
  async updateUserData(
    @graphql.Args() args: UpdateUserDataArgs
  ): Promise<UserData | null> {
    try {
      return await this.service.updateUserData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserData)
  async deleteUserData(
    @graphql.Args() args: DeleteUserDataArgs
  ): Promise<UserData | null> {
    try {
      return await this.service.deleteUserData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
