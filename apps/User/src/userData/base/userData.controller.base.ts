/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserDataService } from "../userData.service";
import { UserDataCreateInput } from "./UserDataCreateInput";
import { UserData } from "./UserData";
import { UserDataFindManyArgs } from "./UserDataFindManyArgs";
import { UserDataWhereUniqueInput } from "./UserDataWhereUniqueInput";
import { UserDataUpdateInput } from "./UserDataUpdateInput";

export class UserDataControllerBase {
  constructor(protected readonly service: UserDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserData })
  async createUserData(
    @common.Body() data: UserDataCreateInput
  ): Promise<UserData> {
    return await this.service.createUserData({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        email: true,
        telegramId: true,
        role: true,
        department: true,
        location: true,
        company: true,
        languagePreference: true,
        personalProfile: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserData] })
  @ApiNestedQuery(UserDataFindManyArgs)
  async userDataItems(@common.Req() request: Request): Promise<UserData[]> {
    const args = plainToClass(UserDataFindManyArgs, request.query);
    return this.service.userDataItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        email: true,
        telegramId: true,
        role: true,
        department: true,
        location: true,
        company: true,
        languagePreference: true,
        personalProfile: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userData(
    @common.Param() params: UserDataWhereUniqueInput
  ): Promise<UserData | null> {
    const result = await this.service.userData({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        email: true,
        telegramId: true,
        role: true,
        department: true,
        location: true,
        company: true,
        languagePreference: true,
        personalProfile: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserData(
    @common.Param() params: UserDataWhereUniqueInput,
    @common.Body() data: UserDataUpdateInput
  ): Promise<UserData | null> {
    try {
      return await this.service.updateUserData({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,
          email: true,
          telegramId: true,
          role: true,
          department: true,
          location: true,
          company: true,
          languagePreference: true,
          personalProfile: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserData(
    @common.Param() params: UserDataWhereUniqueInput
  ): Promise<UserData | null> {
    try {
      return await this.service.deleteUserData({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,
          email: true,
          telegramId: true,
          role: true,
          department: true,
          location: true,
          company: true,
          languagePreference: true,
          personalProfile: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
