/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SurveyDataService } from "../surveyData.service";
import { SurveyDataCreateInput } from "./SurveyDataCreateInput";
import { SurveyData } from "./SurveyData";
import { SurveyDataFindManyArgs } from "./SurveyDataFindManyArgs";
import { SurveyDataWhereUniqueInput } from "./SurveyDataWhereUniqueInput";
import { SurveyDataUpdateInput } from "./SurveyDataUpdateInput";

export class SurveyDataControllerBase {
  constructor(protected readonly service: SurveyDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SurveyData })
  async createSurveyData(
    @common.Body() data: SurveyDataCreateInput
  ): Promise<SurveyData> {
    return await this.service.createSurveyData({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        surveyId: true,
        surveyTitle: true,
        surveyDescription: true,
        targetAudience: true,
        surveyPeriod: true,
        questions: true,
        answers: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SurveyData] })
  @ApiNestedQuery(SurveyDataFindManyArgs)
  async surveyDataItems(@common.Req() request: Request): Promise<SurveyData[]> {
    const args = plainToClass(SurveyDataFindManyArgs, request.query);
    return this.service.surveyDataItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        surveyId: true,
        surveyTitle: true,
        surveyDescription: true,
        targetAudience: true,
        surveyPeriod: true,
        questions: true,
        answers: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SurveyData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async surveyData(
    @common.Param() params: SurveyDataWhereUniqueInput
  ): Promise<SurveyData | null> {
    const result = await this.service.surveyData({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        surveyId: true,
        surveyTitle: true,
        surveyDescription: true,
        targetAudience: true,
        surveyPeriod: true,
        questions: true,
        answers: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SurveyData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSurveyData(
    @common.Param() params: SurveyDataWhereUniqueInput,
    @common.Body() data: SurveyDataUpdateInput
  ): Promise<SurveyData | null> {
    try {
      return await this.service.updateSurveyData({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          surveyId: true,
          surveyTitle: true,
          surveyDescription: true,
          targetAudience: true,
          surveyPeriod: true,
          questions: true,
          answers: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SurveyData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSurveyData(
    @common.Param() params: SurveyDataWhereUniqueInput
  ): Promise<SurveyData | null> {
    try {
      return await this.service.deleteSurveyData({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          surveyId: true,
          surveyTitle: true,
          surveyDescription: true,
          targetAudience: true,
          surveyPeriod: true,
          questions: true,
          answers: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
