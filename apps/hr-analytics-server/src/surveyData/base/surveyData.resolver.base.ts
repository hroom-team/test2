/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SurveyData } from "./SurveyData";
import { SurveyDataCountArgs } from "./SurveyDataCountArgs";
import { SurveyDataFindManyArgs } from "./SurveyDataFindManyArgs";
import { SurveyDataFindUniqueArgs } from "./SurveyDataFindUniqueArgs";
import { CreateSurveyDataArgs } from "./CreateSurveyDataArgs";
import { UpdateSurveyDataArgs } from "./UpdateSurveyDataArgs";
import { DeleteSurveyDataArgs } from "./DeleteSurveyDataArgs";
import { UserCreateInput } from "../../user/base/UserCreateInput";
import { GenerateRecommendationsResult } from "../GenerateRecommendationsResult";
import { SurveyDataService } from "../surveyData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SurveyData)
export class SurveyDataResolverBase {
  constructor(
    protected readonly service: SurveyDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SurveyData",
    action: "read",
    possession: "any",
  })
  async _surveyDataItemsMeta(
    @graphql.Args() args: SurveyDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SurveyData])
  @nestAccessControl.UseRoles({
    resource: "SurveyData",
    action: "read",
    possession: "any",
  })
  async surveyDataItems(
    @graphql.Args() args: SurveyDataFindManyArgs
  ): Promise<SurveyData[]> {
    return this.service.surveyDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SurveyData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SurveyData",
    action: "read",
    possession: "own",
  })
  async surveyData(
    @graphql.Args() args: SurveyDataFindUniqueArgs
  ): Promise<SurveyData | null> {
    const result = await this.service.surveyData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SurveyData)
  @nestAccessControl.UseRoles({
    resource: "SurveyData",
    action: "create",
    possession: "any",
  })
  async createSurveyData(
    @graphql.Args() args: CreateSurveyDataArgs
  ): Promise<SurveyData> {
    return await this.service.createSurveyData({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SurveyData)
  @nestAccessControl.UseRoles({
    resource: "SurveyData",
    action: "update",
    possession: "any",
  })
  async updateSurveyData(
    @graphql.Args() args: UpdateSurveyDataArgs
  ): Promise<SurveyData | null> {
    try {
      return await this.service.updateSurveyData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SurveyData)
  @nestAccessControl.UseRoles({
    resource: "SurveyData",
    action: "delete",
    possession: "any",
  })
  async deleteSurveyData(
    @graphql.Args() args: DeleteSurveyDataArgs
  ): Promise<SurveyData | null> {
    try {
      return await this.service.deleteSurveyData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GenerateRecommendationsResult)
  async GenerateRecommendations(
    @graphql.Args()
    args: UserCreateInput
  ): Promise<GenerateRecommendationsResult> {
    return this.service.GenerateRecommendations(args);
  }
}
