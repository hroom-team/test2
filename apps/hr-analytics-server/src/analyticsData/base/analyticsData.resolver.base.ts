/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AnalyticsData } from "./AnalyticsData";
import { AnalyticsDataCountArgs } from "./AnalyticsDataCountArgs";
import { AnalyticsDataFindManyArgs } from "./AnalyticsDataFindManyArgs";
import { AnalyticsDataFindUniqueArgs } from "./AnalyticsDataFindUniqueArgs";
import { CreateAnalyticsDataArgs } from "./CreateAnalyticsDataArgs";
import { UpdateAnalyticsDataArgs } from "./UpdateAnalyticsDataArgs";
import { DeleteAnalyticsDataArgs } from "./DeleteAnalyticsDataArgs";
import { SurveyDataCreateInput } from "../../surveyData/base/SurveyDataCreateInput";
import { AnalyzeSurveyDataResult } from "../AnalyzeSurveyDataResult";
import { AnalyticsDataService } from "../analyticsData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AnalyticsData)
export class AnalyticsDataResolverBase {
  constructor(
    protected readonly service: AnalyticsDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AnalyticsData",
    action: "read",
    possession: "any",
  })
  async _analyticsDataItemsMeta(
    @graphql.Args() args: AnalyticsDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AnalyticsData])
  @nestAccessControl.UseRoles({
    resource: "AnalyticsData",
    action: "read",
    possession: "any",
  })
  async analyticsDataItems(
    @graphql.Args() args: AnalyticsDataFindManyArgs
  ): Promise<AnalyticsData[]> {
    return this.service.analyticsDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AnalyticsData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AnalyticsData",
    action: "read",
    possession: "own",
  })
  async analyticsData(
    @graphql.Args() args: AnalyticsDataFindUniqueArgs
  ): Promise<AnalyticsData | null> {
    const result = await this.service.analyticsData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AnalyticsData)
  @nestAccessControl.UseRoles({
    resource: "AnalyticsData",
    action: "create",
    possession: "any",
  })
  async createAnalyticsData(
    @graphql.Args() args: CreateAnalyticsDataArgs
  ): Promise<AnalyticsData> {
    return await this.service.createAnalyticsData({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AnalyticsData)
  @nestAccessControl.UseRoles({
    resource: "AnalyticsData",
    action: "update",
    possession: "any",
  })
  async updateAnalyticsData(
    @graphql.Args() args: UpdateAnalyticsDataArgs
  ): Promise<AnalyticsData | null> {
    try {
      return await this.service.updateAnalyticsData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AnalyticsData)
  @nestAccessControl.UseRoles({
    resource: "AnalyticsData",
    action: "delete",
    possession: "any",
  })
  async deleteAnalyticsData(
    @graphql.Args() args: DeleteAnalyticsDataArgs
  ): Promise<AnalyticsData | null> {
    try {
      return await this.service.deleteAnalyticsData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AnalyzeSurveyDataResult)
  async AnalyzeSurveyData(
    @graphql.Args()
    args: SurveyDataCreateInput
  ): Promise<AnalyzeSurveyDataResult> {
    return this.service.AnalyzeSurveyData(args);
  }
}
